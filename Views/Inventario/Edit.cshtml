@model Tenis3t.Models.Inventario

@{
    ViewData["Title"] = "Editar Producto";
}

<div class="container mt-4">
    <h2>Editar Producto</h2>

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <form asp-action="Edit" method="post" id="productoForm">
        <input type="hidden" asp-for="Id" />
        @Html.AntiForgeryToken()

        <div class="mb-3">
            <label asp-for="Nombre" class="form-label">Nombre del Producto</label>
            <input asp-for="Nombre" class="form-control" />
            <span asp-validation-for="Nombre" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="Genero" class="form-label">Género</label>
            <select asp-for="Genero" class="form-select" id="generoSelect">
                <option value="">Seleccione un género</option>
                <option value="hombre">Hombre</option>
                <option value="dama">Dama</option>
            </select>
            <span asp-validation-for="Genero" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="Costo" class="form-label">Costo Unitario</label>
            <input asp-for="Costo" class="form-control" id="costoInput" />
            <span asp-validation-for="Costo" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="PrecioVenta" class="form-label">Precio de Venta</label>
            <input asp-for="PrecioVenta" class="form-control" id="precioVentaInput" />
            <span asp-validation-for="PrecioVenta" class="text-danger"></span>
        </div>

        <!-- Sección de tallas -->
        <div class="mb-3" id="tallasSection">
            <h5>Stock por Tallas</h5>
            <div id="tallasContainer">
                @foreach (var talla in ViewBag.TallasDisponibles as string[])
                {
                    var cantidad = Model.Tallas?.FirstOrDefault(t => t.Talla == talla)?.Cantidad ?? 0;
                    <div class="row mb-2">
                        <div class="col-md-2">
                            <label class="form-label">Talla @talla</label>
                        </div>
                        <div class="col-md-4">
                            <input type="number" name="tallas[@talla]" class="form-control talla-input" 
                                   min="0" value="@cantidad" data-talla="@talla" />
                        </div>
                    </div>
                }
            </div>
            <div class="mt-2">
                <label class="form-label">Total en Stock:</label>
                <input type="text" class="form-control" id="totalStock" readonly 
                       value="@(Model.Tallas?.Sum(t => t.Cantidad) ?? 0)" />
            </div>
        </div>

        <div class="mb-3">
            <div class="row">
                <div class="col-md-4">
                    <label class="form-label">Ganancia por Unidad</label>
                    <input type="text" class="form-control" id="gananciaUnidad" readonly 
                           value="@((Model.PrecioVenta - Model.Costo).ToString("N0"))" />
                </div>
                <div class="col-md-4">
                    <label class="form-label">Ganancia Total</label>
                    <input type="text" class="form-control" id="gananciaTotal" readonly 
                           value="@(((Model.PrecioVenta - Model.Costo) * (Model.Tallas?.Sum(t => t.Cantidad) ?? 0)).ToString("N0"))" />
                </div>
            </div>
        </div>

        <div class="mb-3">
            <label for="claveSeguridad" class="form-label">Clave de Seguridad</label>
            <input type="password" name="claveSeguridad" class="form-control" required />
            @if (ViewData.ModelState["claveSeguridad"]?.Errors?.Count > 0)
            {
                <span class="text-danger">@ViewData.ModelState["claveSeguridad"].Errors.First().ErrorMessage</span>
            }
        </div>

        <div class="mb-3">
            <button type="submit" class="btn btn-success">
                <i class="bi bi-save"></i> Actualizar Producto
            </button>
            <a asp-action="Index" class="btn btn-danger">
                <i class="bi bi-arrow-left"></i> Cancelar
            </a>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const formatoMoneda = new Intl.NumberFormat('es-CO', {
                style: 'decimal',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
            });

            // Tallas por género
            const tallasPorGenero = {
                'hombre': ['38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50'],
                'dama': ['34', '35', '36', '37', '38', '39', '40']
            };

            // Guardar los valores actuales de las tallas
            const valoresTallasActuales = {};
            document.querySelectorAll('.talla-input').forEach(input => {
                valoresTallasActuales[input.dataset.talla] = input.value;
            });

            // Establecer el género seleccionado
            document.getElementById('generoSelect').value = '@Model.Genero';

            // Manejador de cambio en el select de género
            document.getElementById('generoSelect').addEventListener('change', function () {
                const genero = this.value;
                const tallasContainer = document.getElementById('tallasContainer');

                if (genero && tallasPorGenero[genero]) {
                    tallasContainer.innerHTML = '';

                    // Crear inputs para cada talla, preservando valores existentes si los hay
                    tallasPorGenero[genero].forEach(talla => {
                        const valorExistente = valoresTallasActuales[talla] || 0;
                        
                        const div = document.createElement('div');
                        div.className = 'row mb-2';
                        div.innerHTML = `
                            <div class="col-md-2">
                                <label class="form-label">Talla ${talla}</label>
                            </div>
                            <div class="col-md-4">
                                <input type="number" name="tallas[${talla}]" class="form-control talla-input" 
                                       min="0" value="${valorExistente}" data-talla="${talla}" />
                            </div>
                        `;
                        tallasContainer.appendChild(div);
                    });

                    // Actualizar el objeto de valores actuales
                    document.querySelectorAll('.talla-input').forEach(input => {
                        valoresTallasActuales[input.dataset.talla] = input.value;
                    });

                    // Calcular total inicial
                    calcularTotalStock();
                }
            });

            // Calcular ganancias
            function calcularGanancias() {
                const costo = parseFloat(document.getElementById('costoInput').value) || 0;
                const precioVenta = parseFloat(document.getElementById('precioVentaInput').value) || 0;
                const gananciaPorUnidad = precioVenta - costo;
                const totalStock = parseInt(document.getElementById('totalStock').value) || 0;
                const gananciaTotal = gananciaPorUnidad * totalStock;

                document.getElementById('gananciaUnidad').value = formatoMoneda.format(gananciaPorUnidad);
                document.getElementById('gananciaTotal').value = formatoMoneda.format(gananciaTotal);
            }

            // Calcular total de stock
            function calcularTotalStock() {
                const inputs = document.querySelectorAll('.talla-input');
                let total = 0;

                inputs.forEach(input => {
                    total += parseInt(input.value) || 0;
                });

                document.getElementById('totalStock').value = total;
                calcularGanancias();
            }

            // Event listeners
            document.getElementById('costoInput').addEventListener('input', calcularGanancias);
            document.getElementById('precioVentaInput').addEventListener('input', calcularGanancias);

            // Delegación de eventos para los inputs de tallas
            document.getElementById('tallasContainer').addEventListener('input', function (e) {
                if (e.target.classList.contains('talla-input')) {
                    // Actualizar el valor en el objeto de valores actuales
                    valoresTallasActuales[e.target.dataset.talla] = e.target.value;
                    calcularTotalStock();
                }
            });

            // Calcular inicialmente
            calcularGanancias();
        });
    </script>
}