@model Tenis3t.Models.Inventario

@{
    ViewData["Title"] = "Editar Producto";
}

<div class="container mt-4">
    <h2>Editar Producto</h2>

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <form asp-action="Edit" method="post" id="productoForm">
        @Html.AntiForgeryToken()
        <input type="hidden" asp-for="Id" />

        <div class="mb-3">
            <label asp-for="Nombre" class="form-label">Nombre del Producto</label>
            <input asp-for="Nombre" class="form-control" />
            <span asp-validation-for="Nombre" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="Genero" class="form-label">Género</label>
            <select asp-for="Genero" class="form-select" id="generoSelect">
                <option value="hombre" selected="@(Model.Genero == "hombre")">Hombre</option>
                <option value="dama" selected="@(Model.Genero == "dama")">Dama</option>
            </select>
            <span asp-validation-for="Genero" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="Costo" class="form-label">Costo Unitario</label>
            <input asp-for="Costo" class="form-control" id="costoInput" />
            <span asp-validation-for="Costo" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="PrecioVenta" class="form-label">Precio de Venta</label>
            <input asp-for="PrecioVenta" class="form-control" id="precioVentaInput" />
            <span asp-validation-for="PrecioVenta" class="text-danger"></span>
        </div>

        <!-- Sección de tallas -->
        <div class="mb-3" id="tallasSection">
            <h5>Stock por Tallas</h5>
            <div id="tallasContainer">
                @foreach (var talla in Model.Tallas.OrderBy(t => t.Talla))
                {
                    <div class="row mb-2">
                        <div class="col-md-2">
                            <label class="form-label">Talla @talla.Talla</label>
                        </div>
                        <div class="col-md-4">
                            <input type="number" name="tallas[@talla.Talla]" class="form-control talla-input" 
                                   min="0" value="@talla.Cantidad" data-talla="@talla.Talla" />
                        </div>
                    </div>
                }
            </div>
            <div class="mt-2">
                <label class="form-label">Total en Stock:</label>
                <input type="text" class="form-control" id="totalStock" value="@Model.Cantidad" readonly />
            </div>
        </div>

        <div class="mb-3">
            <div class="row">
                <div class="col-md-4">
                    <label class="form-label">Ganancia por Unidad</label>
                    <input type="text" class="form-control" id="gananciaUnidad" 
                           value="@Model.GananciaPorUnidad.ToString("N0", new System.Globalization.CultureInfo("es-CO"))" readonly />
                </div>
                <div class="col-md-4">
                    <label class="form-label">Ganancia Total</label>
                    <input type="text" class="form-control" id="gananciaTotal" 
                           value="@Model.GananciaTotal.ToString("N0", new System.Globalization.CultureInfo("es-CO"))" readonly />
                </div>
            </div>
        </div>

        <div class="mb-3">
            <button type="submit" class="btn btn-success">
                <i class="bi bi-save"></i> Guardar Cambios
            </button>
            <a asp-action="Index" class="btn btn-secondary">
                <i class="bi bi-arrow-left"></i> Cancelar
            </a>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const formatoMoneda = new Intl.NumberFormat('es-CO', {
                style: 'decimal',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
            });

            // Tallas por género
            const tallasPorGenero = {
                'hombre': ['40', '41', '42', '43', '44', '45'],
                'dama': ['35', '36', '37', '38', '39', '40']
            };

            // Manejador de cambio en el select de género
            document.getElementById('generoSelect').addEventListener('change', function() {
                const genero = this.value;
                const tallasContainer = document.getElementById('tallasContainer');
                
                if (genero && tallasPorGenero[genero]) {
                    tallasContainer.innerHTML = '';
                    
                    // Crear inputs para cada talla
                    tallasPorGenero[genero].forEach(talla => {
                        // Verificar si ya existe una talla con este valor
                        const inputExistente = document.querySelector(`input[name="tallas[${talla}]"]`);
                        const valorExistente = inputExistente ? inputExistente.value : 0;
                        
                        const div = document.createElement('div');
                        div.className = 'row mb-2';
                        div.innerHTML = `
                            <div class="col-md-2">
                                <label class="form-label">Talla ${talla}</label>
                            </div>
                            <div class="col-md-4">
                                <input type="number" name="tallas[${talla}]" class="form-control talla-input" 
                                       min="0" value="${valorExistente}" data-talla="${talla}" />
                            </div>
                        `;
                        tallasContainer.appendChild(div);
                    });
                    
                    // Calcular total inicial
                    calcularTotalStock();
                }
            });

            // Calcular ganancias
            function calcularGanancias() {
                const costo = parseFloat(document.getElementById('costoInput').value) || 0;
                const precioVenta = parseFloat(document.getElementById('precioVentaInput').value) || 0;
                const gananciaPorUnidad = precioVenta - costo;
                const totalStock = parseInt(document.getElementById('totalStock').value) || 0;
                const gananciaTotal = gananciaPorUnidad * totalStock;
                
                document.getElementById('gananciaUnidad').value = formatoMoneda.format(gananciaPorUnidad);
                document.getElementById('gananciaTotal').value = formatoMoneda.format(gananciaTotal);
            }

            // Calcular total de stock
            function calcularTotalStock() {
                const inputs = document.querySelectorAll('.talla-input');
                let total = 0;
                
                inputs.forEach(input => {
                    total += parseInt(input.value) || 0;
                });
                
                document.getElementById('totalStock').value = total;
                calcularGanancias();
            }

            // Event listeners
            document.getElementById('costoInput').addEventListener('input', calcularGanancias);
            document.getElementById('precioVentaInput').addEventListener('input', calcularGanancias);
            
            // Delegación de eventos para los inputs de tallas
            document.getElementById('tallasContainer').addEventListener('input', function(e) {
                if (e.target.classList.contains('talla-input')) {
                    calcularTotalStock();
                }
            });

            // Calcular valores iniciales
            calcularGanancias();
        });
    </script>
}