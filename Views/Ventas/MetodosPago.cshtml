@using System.Globalization
@model Tenis3t.Models.VentaViewModel

@{
    ViewData["Title"] = "Métodos de Pago";
}

<h1>Métodos de Pago</h1>
<h4>Total de la Venta: @ViewBag.TotalVenta.ToString("C", new CultureInfo("es-CO"))</h4>
<hr />

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">
        @TempData["ErrorMessage"]
    </div>
}

<form asp-action="MetodosPago" method="post" id="formPagos">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    
    <input type="hidden" asp-for="NombreCliente" />
    <input type="hidden" asp-for="CedulaCliente" />
    <input type="hidden" asp-for="TelefonoCliente" />
    <input type="hidden" asp-for="EmailCliente" />

    <h4>Productos Seleccionados</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Producto</th>
                <th>Talla</th>
                <th>Cantidad</th>
                <th>Precio Unitario</th>
                <th>Subtotal</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.Detalles.Count; i++)
            {
                <tr>
                    <td>
                        @Model.Detalles[i].NombreProducto
                        <input type="hidden" asp-for="@Model.Detalles[i].NombreProducto" />
                        <input type="hidden" asp-for="@Model.Detalles[i].TallaInventarioId" />
                    </td>
                    <td>
                        @Model.Detalles[i].Talla
                        <input type="hidden" asp-for="@Model.Detalles[i].Talla" />
                    </td>
                    <td>
                        @Model.Detalles[i].Cantidad
                        <input type="hidden" asp-for="@Model.Detalles[i].Cantidad" />
                    </td>
                    <td>
                        @Model.Detalles[i].PrecioUnitario.ToString("C", new CultureInfo("es-CO"))
                        <input type="hidden" asp-for="@Model.Detalles[i].PrecioUnitario" />
                    </td>
                    <td>
                        @((Model.Detalles[i].PrecioUnitario * Model.Detalles[i].Cantidad).ToString("C", new CultureInfo("es-CO")))
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <h4>Métodos de Pago</h4>
    
    <div id="metodosPagoContainer">
        @for (int i = 0; i < Model.MetodosPago.Count; i++)
        {
            <div class="card mb-3 metodo-pago-item" data-index="@i">
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-group">
                                <label class="control-label">Método de Pago</label>
                                <select asp-for="@Model.MetodosPago[i].MetodoPagoId" 
                                        class="form-control metodo-pago-select"
                                        asp-items="@ViewBag.MetodosPagoDisponibles">
                                    <option value="">Seleccione...</option>
                                </select>
                                <span asp-validation-for="@Model.MetodosPago[i].MetodoPagoId" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label asp-for="@Model.MetodosPago[i].Monto" class="control-label">Monto</label>
                                <input asp-for="@Model.MetodosPago[i].Monto" class="form-control monto-input" 
                                       onchange="calcularTotalPagos()" />
                                <span asp-validation-for="@Model.MetodosPago[i].Monto" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group referencia-container" style="display: none;">
                                <label asp-for="@Model.MetodosPago[i].Referencia" class="control-label">Referencia</label>
                                <input asp-for="@Model.MetodosPago[i].Referencia" class="form-control" />
                                <span asp-validation-for="@Model.MetodosPago[i].Referencia" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    <button type="button" class="btn btn-danger btn-sm mt-2 remove-pago" onclick="removePagoItem(this)">Eliminar</button>
                </div>
            </div>
        }
    </div>

    <button type="button" id="addPagoBtn" class="btn btn-secondary mb-3">Agregar Método de Pago</button>

    <div class="form-group">
        <h5>Total Pagado: <span id="totalPagado">0</span></h5>
        <h5>Restante: <span id="restante">@ViewBag.TotalVenta.ToString("C", new CultureInfo("es-CO"))</span></h5>
    </div>

    <div class="form-group">
        <input type="submit" value="Confirmar Venta" class="btn btn-primary" id="submitBtn" />
        <a asp-action="Create" class="btn btn-secondary">Volver</a>
    </div>
</form>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        // Métodos de pago que requieren referencia
        const metodosConReferencia = ['transferencia', 'tarjeta', 'credito', 'datáfono', 'datafono'];
        
        // Template para nuevos métodos de pago
        const pagoTemplate = `
            <div class="card mb-3 metodo-pago-item" data-index="{index}">
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-group">
                                <label class="control-label">Método de Pago</label>
                                <select name="MetodosPago[{index}].MetodoPagoId" 
                                        class="form-control metodo-pago-select"
                                        onchange="updateReferenciaField(this)">
                                    <option value="">Seleccione...</option>
                                    @foreach (var item in ViewBag.MetodosPagoDisponibles as SelectList)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                </select>
                                <span class="text-danger field-validation-valid" data-valmsg-for="MetodosPago[{index}].MetodoPagoId" data-valmsg-replace="true"></span>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label class="control-label">Monto</label>
                                <input name="MetodosPago[{index}].Monto" class="form-control monto-input" 
                                       onchange="calcularTotalPagos()" data-val="true" 
                                       data-val-required="El campo Monto es obligatorio." 
                                       data-val-number="El campo Monto debe ser un número." />
                                <span class="text-danger field-validation-valid" data-valmsg-for="MetodosPago[{index}].Monto" data-valmsg-replace="true"></span>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group referencia-container" style="display: none;">
                                <label class="control-label">Referencia</label>
                                <input name="MetodosPago[{index}].Referencia" class="form-control" 
                                       data-val="true" data-val-required="Este método de pago requiere referencia" />
                                <span class="text-danger field-validation-valid" data-valmsg-for="MetodosPago[{index}].Referencia" data-valmsg-replace="true"></span>
                            </div>
                        </div>
                    </div>
                    <button type="button" class="btn btn-danger btn-sm mt-2 remove-pago" onclick="removePagoItem(this)">Eliminar</button>
                </div>
            </div>
        `;
        
        // Calcular total de pagos al cargar la página
        document.addEventListener('DOMContentLoaded', function() {
            calcularTotalPagos();
            
            // Inicializar eventos para los selects existentes
            document.querySelectorAll('.metodo-pago-select').forEach(select => {
                select.addEventListener('change', function() {
                    updateReferenciaField(this);
                });
                
                // Verificar si ya tiene un valor seleccionado
                if (select.value) {
                    updateReferenciaField(select);
                }
            });
            
            // Configurar botón para agregar métodos de pago
            document.getElementById('addPagoBtn').addEventListener('click', addPagoItem);
            
            // Validar formulario antes de enviar
            document.getElementById('formPagos').addEventListener('submit', function(e) {
                const totalVenta = @ViewBag.TotalVenta;
                const totalPagado = calcularSumaMontos();
                
                if (Math.abs(totalPagado - totalVenta) > 0.01) {
                    e.preventDefault();
                    alert(`La suma de los pagos (${formatearMoneda(totalPagado)}) no coincide con el total de la venta (${formatearMoneda(totalVenta)}). Por favor ajuste los montos.`);
                }
            });
        });

        // Función para agregar un nuevo método de pago
        function addPagoItem() {
            const container = document.getElementById('metodosPagoContainer');
            const nextIndex = container.querySelectorAll('.metodo-pago-item').length;
            
            const newPagoHtml = pagoTemplate.replace(/{index}/g, nextIndex);
            const div = document.createElement('div');
            div.innerHTML = newPagoHtml;
            
            container.appendChild(div.firstChild);
            
            // Inicializar validación para los nuevos campos
            $.validator.unobtrusive.parse(container);
        }
        
        // Función para eliminar un método de pago
        function removePagoItem(button) {
            const item = button.closest('.metodo-pago-item');
            item.remove();
            
            // Recalcular totales
            calcularTotalPagos();
            
            // Reindexar los elementos
            const items = document.querySelectorAll('.metodo-pago-item');
            items.forEach((item, index) => {
                item.setAttribute('data-index', index);
                
                // Actualizar los names de los inputs
                const inputs = item.querySelectorAll('input, select');
                inputs.forEach(input => {
                    const name = input.getAttribute('name');
                    if (name) {
                        const newName = name.replace(/\[\d+\]/, `[${index}]`);
                        input.setAttribute('name', newName);
                        
                        // Actualizar data-valmsg-for para las validaciones
                        const valMsg = input.nextElementSibling;
                        if (valMsg && valMsg.getAttribute('data-valmsg-for')) {
                            valMsg.setAttribute('data-valmsg-for', newName);
                        }
                    }
                });
            });
            
            // Revalidar el formulario
            $.validator.unobtrusive.parse(document.getElementById('formPagos'));
        }
        
        // Función para mostrar/ocultar campo de referencia según método seleccionado
        function updateReferenciaField(select) {
            const container = select.closest('.metodo-pago-item');
            const referenciaContainer = container.querySelector('.referencia-container');
            const referenciaInput = container.querySelector('input[name*="Referencia"]');
            const metodoNombre = select.options[select.selectedIndex]?.text.toLowerCase() || '';
            
            const requiereReferencia = metodosConReferencia.some(m => metodoNombre.includes(m));
            
            if (requiereReferencia) {
                referenciaContainer.style.display = 'block';
                referenciaInput.setAttribute('data-val', 'true');
                referenciaInput.setAttribute('data-val-required', 'Este método de pago requiere referencia');
            } else {
                referenciaContainer.style.display = 'none';
                referenciaInput.removeAttribute('data-val');
                referenciaInput.removeAttribute('data-val-required');
                referenciaInput.value = '';
            }
            
            // Revalidar el formulario
            $.validator.unobtrusive.parse(document.getElementById('formPagos'));
        }

        // Función para calcular el total de pagos
        function calcularTotalPagos() {
            const totalPagado = calcularSumaMontos();
            const totalVenta = @ViewBag.TotalVenta;
            const restante = totalVenta - totalPagado;
            
            document.getElementById('totalPagado').textContent = formatearMoneda(totalPagado);
            document.getElementById('restante').textContent = formatearMoneda(restante);
            
            // Resaltar si falta o sobra dinero
            const restanteElement = document.getElementById('restante');
            const submitBtn = document.getElementById('submitBtn');
            
            if (Math.abs(restante) < 0.01) { // Consideramos igual si la diferencia es mínima
                restanteElement.style.color = 'green';
                restanteElement.textContent = formatearMoneda(0);
                submitBtn.disabled = false;
            } else if (restante > 0) {
                restanteElement.style.color = 'red';
                submitBtn.disabled = true;
            } else {
                restanteElement.style.color = 'orange';
                restanteElement.textContent = formatearMoneda(Math.abs(restante)) + ' (Cambio)';
                submitBtn.disabled = false;
            }
        }
        
        // Función auxiliar para calcular la suma de montos
        function calcularSumaMontos() {
            let total = 0;
            document.querySelectorAll('.monto-input').forEach(input => {
                total += parseFloat(input.value) || 0;
            });
            return total;
        }

        // Función para formatear moneda
        function formatearMoneda(valor) {
            return valor.toLocaleString('es-CO', {
                style: 'currency',
                currency: 'COP',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
            });
        }
    </script>
}